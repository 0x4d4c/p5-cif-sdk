#!perl

BEGIN {
    use FindBin;
    use local::lib "$FindBin::Bin/..";
}

use strict;
use warnings;
use feature 'say';

use CIF::SDK qw/init_logging $Logger/;
use CIF::SDK::Client;
use CIF::SDK::FormatFactory;
use Getopt::Long;
use Data::Dumper;
use Carp;

my $help;
my $remote          = 'https://localhost:443/api';
my $no_verify_ssl   = 0;
my $timeout         = 300;
my $query;
my $group;
my $token;
my $limit           = 500;
my $confidence      = 0;
my $format          = 'table';
my $ping            = 0;
my $tags;
my $nolog           = 0;
my $submit		    = 0;
my $ping_ttl        = 4;
my $debug           = 0;
my $verbose         = 0;

my $config = $ENV{'HOME'}.'/.cif';

Getopt::Long::Configure ("bundling");
GetOptions(
    'help|h'        => \$help, 
    'config|C=s'    => \$config,
    'debug|d'       => \$debug,
    'verbose|v'     => \$verbose,
    
    'remote|R=s'        => \$remote,
    'query|q=s'         => \$query,
    'submit|s'          => \$submit,
    'token|T=s'         => \$token,
    'group|g=s'         => \$group,
    'limit|l=i'         => \$limit,
    'confidence|c=i'    => \$confidence,
    'tags|t=s'          => \$tags,
    
    'no-verify-ssl'     => \$no_verify_ssl,
    
    'ping|p'            => \$ping,
    'format|f=s'        => \$format,
    'nolog|n'           => \$nolog,
    'ttl=n'				=> \$ping_ttl,
) or die(usage());

die(usage()) if($help);
die(usage()) unless($query || $ping || $submit);

$debug = ($debug) ? 'INFO' : 'ERROR';
$debug = 'DEBUG' if($verbose);

init_logging(
    { 
        level       => $debug,
        category	=> 'cif',
    },
);

die(usage()."\nmissing Token (--token|-T)\n") unless($token);


if($submit){
    $submit = [];
    while(<STDIN>){
        chomp();
        push(@$submit,decode_json($_));
    }
}

sub usage {
    return <<EOF;

Usage: $0 [OPTION]

Options:

    -R, --remote=STRING     specify the remote, default: $remote
    -T, --token=STRING      specify an access token
    -q, --query=STRING      specify a search
    -f, --format=FORMAT     specify the output format, default: $format
    -h, --help              this message       
    
Advanced Options:

    -g, --group=STRING          specify a default group to use
    -l, --limit=INT             specify a return limit, default: $limit
    -c, --confidence=INT        specify a default confidence, default: $confidence
    -t, --tags=STRING,STRING    specify tags to filter against
    -s, --submit                submit data via STDIN (json keypairs)
    --no-verify-ssl             turn off SSL/TLS verification

Ping Options:
	--ttl=INT				specify number of pings to send, default: $ping_ttl
							(0 infinate, halt with CTRL+C)

 Examples:
    $0 -q example.com -v
    $0 -t botnet,zeus -c 85
    $0 -q example.com -t botnet,zeus -c 85 -l 50

EOF
}

my $cli = CIF::SDK::Client->new({
    token       => $token,
    remote      => $remote,
    timeout     => $timeout,
    verify_ssl  => ($no_verify_ssl) ? 0 : 1,
});

my ($err,$ret);
if($query){
    ($err,$ret) = $cli->search({
        query       => $query,
        confidence  => $confidence,
        limit       => $limit,
    });
    croak($err) if($err);
    my $formatter = CIF::SDK::FormatFactory->new_plugin({ format => $format });
    my $text = $formatter->process($ret);
    say $text;
} elsif($submit){
    
} elsif($ping){
    say 'pinging: '.$remote.'...';
    my $d = 0;
    $SIG{'INT'} = sub { $d = 1; };
    my ($x,$y) = (0, $ping_ttl);
    while(!$d){
        $ret = $cli->ping();
        say 'roundtrip: '.$ret.' ms';
        select(undef,undef,undef,1);
        $x++ if($y); # increase if we're not going infinately
        $d = 1 if($x && ($x == $y)); # done if we reach ttl
    }
    say 'done...';
    exit(0);
}

