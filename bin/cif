#!perl

BEGIN {
    use FindBin;
    use local::lib "$FindBin::Bin/..";
}

use strict;
use warnings FATAL => 'all';

use CIF::SDK qw/init_logging $Logger/;
use CIF::SDK::Client;
use CIF::SDK::FormatFactory;
use Getopt::Long;
use Config::Simple;
use Carp;
use Data::Dumper;

use constant {
    REMOTE_DEFAULT  => 'https://localhost:443/api',
    TIMEOUT_DEFAULT => 300,
    LIMIT_DEFAULT   => 500,
    FORMAT_DEFAULT  => 'table',
    CONFIG_DEFAULT  => $ENV{'HOME'}.'/.cif',
};

my $help;
my $remote          = REMOTE_DEFAULT();
my $no_verify_ssl   = 0;
my $timeout         = TIMEOUT_DEFAULT();
my $query;
my $group;
my $token;
my $limit           = LIMIT_DEFAULT();
my $confidence      = 0;
my $format          = FORMAT_DEFAULT();
my $ping            = 0;
my $tags;
my $nolog           = 0;
my $submit		    = 0;
my $ping_ttl        = 4;
my $debug           = 0;
my $verbosity       = 0;
my $config          = CONFIG_DEFAULT();

Getopt::Long::Configure("bundling");
GetOptions(
    'help|h'            => \$help, 
    'config|C=s'        => \$config,
    'debug|d'           => \$debug,
    'verbosity|v+'      => \$verbosity,
    
    'remote|R=s'        => \$remote,
    'query|q=s'         => \$query,
    'submit|s'          => \$submit,
    'token|T=s'         => \$token,
    'group|g=s'         => \$group,
    'limit|l=i'         => \$limit,
    'confidence|c=i'    => \$confidence,
    'tags|t=s'          => \$tags,
    
    'no-verify-ssl'     => \$no_verify_ssl,
    
    'ping|p'            => \$ping,
    'format|f=s'        => \$format,
    'nolog|n'           => \$nolog,
    'ttl=n'				=> \$ping_ttl,
) or die(usage());

die(usage()) if($help);
die(usage()) unless($query || $ping || $submit);

if(-e $config){
    $config = Config::Simple->new($config) || croak('config error...');
    $config = $config->get_block('client') || croak('no client section in config');
    
    $remote         = $config->{'remote'} if($config->{'remote'} && $remote eq REMOTE_DEFAULT());
    $token          = $config->{'token'} if($config->{'token'} && !$token);
    $no_verify_ssl  = $config->{'no_verify_ssl'} if($config->{'no_verify_ssl'} && !$no_verify_ssl); # double negative
    $limit          = $config->{'limit'} if($config->{'limit'} && $limit != LIMIT_DEFAULT());
    $timeout        = $config->{'timeout'} if($config->{'timeout'} && $timeout != TIMEOUT_DEFAULT());
    $nolog          = $config->{'nolog'} if($config->{'nolog'});
}

my $loglevel = ($debug) ? 'DEBUG' : 'WARN';

init_logging(
    { 
        level       => $loglevel,
        category	=> 'cif',
    },
);

if($verbosity){
    unless($debug){ # we're already at TRACE
        $Logger->more_logging($verbosity);
    }
}

die(usage()."\nmissing Token (--token|-T)\n") unless($token);


if($submit){
    $submit = [];
    while(<STDIN>){
        chomp();
        push(@$submit,decode_json($_));
    }
}

sub usage {
    return <<EOF;

Usage: $0 [OPTION]

Options:

    -R, --remote=STRING         specify the remote, default: $remote
    -T, --token=STRING          specify an access token
    -q, --query=STRING          specify a search
    -f, --format=FORMAT         specify the output format, default: $format
    -h, --help                  this message       
    
Advanced Options:

    -g, --group=STRING          specify a default group to use
    -l, --limit=INT             specify a return limit, default: $limit
    -c, --confidence=INT        specify a default confidence, default: $confidence
    -t, --tags=STRING,STRING    specify tags to filter against
    -s, --submit                submit data via STDIN (json keypairs)
    --no-verify-ssl             turn off SSL/TLS verification

Ping Options:
    --ttl=INT                   specify number of pings to send, default: $ping_ttl
                                (0 infinate, halt with SIGINT or CTRL+C)
 Examples:
    $0 -q example.com -v
    $0 -t botnet,zeus -c 85
    $0 -q example.com -t botnet,zeus -c 85 -l 50

EOF
}

$Logger->info('starting up client...');
my $cli = CIF::SDK::Client->new({
    token       => $token,
    remote      => $remote,
    timeout     => $timeout,
    verify_ssl  => ($no_verify_ssl) ? 0 : 1,
    nolog       => $nolog,
});

my ($err,$ret);
if($query){
    $Logger->info('running search...');
    ($err,$ret) = $cli->search({
        query       => $query,
        confidence  => $confidence,
        limit       => $limit,
    });
    croak($err) if($err);
    $Logger->info('search returned, formatting..');
    my $formatter = CIF::SDK::FormatFactory->new_plugin({ format => $format });
    my $text = $formatter->process($ret);
    print $text."\n";
} elsif($submit){
    ## TODO
    
} elsif($ping){
    $Logger->info('pinging: '.$remote.'...');
    my $d = 0;
    $SIG{'INT'} = sub { $d = 1; };
    my ($x,$y) = (0, $ping_ttl);
    while(!$d){
        $ret = $cli->ping();
        $Logger->info('roundtrip: '.$ret.' ms');
        select(undef,undef,undef,1);
        $x++ if($y); # increase if we're not going infinately
        $d = 1 if($x && ($x == $y)); # done if we reach ttl
    }
}
$Logger->info('done...');
