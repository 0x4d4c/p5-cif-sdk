#!perl

BEGIN {
    use FindBin;
    use local::lib "$FindBin::Bin/..";
}

use 5.014002;
use strict;
use warnings;
use feature 'say';

use CIF qw/init_logging $Logger hash_create_random/;
use CIF::Client;
use JSON::XS;
use Getopt::Long;
use Data::Dumper;
use Carp;
use Time::HiRes qw(tv_interval);

my $debug     	= 0;
my $verbose		= 0;
my $help;
my $man;
my $remote      = 'tcp://localhost';
my $port        = CIF::DEFAULT_PORT();
my $query;
my $group;
my $token       = hash_create_random();
my $limit       = 500;
my $confidence  = 0;
my $format      = 'table';
my $ping        = 0;
my $tags;
my $subscriber  = 0;
my $nolog       = 0;
my $submit		= 0;
my $ping_ttl	= 4;

my $config = $ENV{'HOME'}.'/.cif';

Getopt::Long::Configure ("bundling");
GetOptions(
    'help|h'        => \$help, 
    'config|C=s'    => \$config,
    'debug|d'       => \$debug,
    'verbose|v'   	=> \$verbose,
    
    'remote|R=s'        => \$remote,
    'query|q=s'         => \$query,
    'submit|s'          => \$submit,
    'token|T=s'         => \$token,
    'group|g=s'         => \$group,
    'limit|l=i'         => \$limit,
    'confidence|c=i'    => \$confidence,
    'tags|t=s'          => \$tags,
    
    'ping|p'            => \$ping,
    'format|f=s'        => \$format,
    'subscriber|S'      => \$subscriber,
    'nolog|n'           => \$nolog,
    'ttl=n'				=> \$ping_ttl,
) or die(usage());

die(usage()) if($help);
die(usage()) unless($query || $ping || $submit || $subscriber);

$debug = ($debug) ? 'INFO' : 'ERROR';
$debug = 'DEBUG' if($verbose);

init_logging(
    { 
        level       => $debug,
        category	=> 'cif',
    }, 
);

if($submit){
    $submit = [];
    while(<STDIN>){
        chomp();
        push(@$submit,decode_json($_));
    }
}

sub usage {
    return <<EOF;

Usage: $0 [OPTION]

 Options:
    -R, --remote=STRING     specify the remote, default: $remote
    -C, --config=FILE       specify cofiguration file, default: ~/.cif 
    -f, --format=FORMAT     specify the output format, default: $format
    -d, --debug             turn on debugging
    -v, --verbose           turn up debug verbosity [1-10]
    -h, --help              this message       
    
Advanced Options:
    -T, --token=STRING          specify an access token
    -g, --group=STRING          specify a default group to use
    -l, --limit=INT             specify a return limit, default: $limit
    -c, --confidence=INT        specify a default confidence, default: $confidence
    -t, --tags=STRING,STRING    specify tags to filter against
    -s, --submit                submit data via STDIN (json keypairs)

Ping Options:
	--ttl=INT				specify number of pings to send, default: $ping_ttl
							(0 infinate, halt with CTRL+C)

 Examples:
    $0 -C $ENV{'HOME'}/.cif -q example.com
    $0 -t botnet,zeus -c 85
    $0 -q example.com -t botnet,zeus -c 85 -l 50

EOF
}

if($subscriber){
    $remote .= ':'.CIF::DEFAULT_PUBLISHER_PORT();
} else {
    $remote .= ':'.CIF::DEFAULT_PORT();
}

my $cli = CIF::Client->new({
    remote          => $remote,
    Token           => $token,
    encoder_pretty  => 1,
    subscriber      => $subscriber,
});

my ($ret,$err);
if($ping){
    say 'pinging: '.$remote.'...';
    my $d = 0;
    $SIG{'INT'} = sub { $d = 1; };
    my ($x,$y) = (0, $ping_ttl);
    while(!$d){
        $ret = $cli->ping();
        say 'roundtrip: '.$ret.' ms';
        select(undef,undef,undef,1);
        $x++ if($y); # increase if we're not going infinately
        $d = 1 if($x && ($x == $y)); # done if we reach ttl
    }
    say 'done...';
    exit(0);
} elsif($query){
    ($err,$ret) = $cli->search({
        Query       => $query,
        Tags        => $tags,
        group       => $group,
        limit       => $limit,
        confidence  => $confidence,
    });
    croak($err) if($err);
    $ret = $cli->format({ data => $ret, format => $format });
} elsif($submit){
    ($err,$ret) = $cli->submit({
        Observables => $submit,
    });
    croak($err) if($err);
    $ret = join("\n",map { $_ = "id: $_" } @$ret );
    $ret = "success: \n".$ret;
} elsif($subscriber){
    require AnyEvent;
    my $done = AnyEvent->condvar();
    $SIG{'INT'} = sub { $done->send(); };
    debug('subbing...');
    my $w = $cli->subscribe(sub {
        while($cli->has_pollin()){
            my $msg = $cli->receive();
            say Dumper(@$msg);
        }
    });
    $done->recv();
}

say $ret if($ret);
