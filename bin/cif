#!perl

BEGIN {
    use FindBin;
    use local::lib "$FindBin::Bin/..";
}

use feature 'say';
use strict;
use warnings FATAL => 'all';

use CIF::SDK qw/init_logging $Logger parse_config/;
use CIF::SDK::Client;
use CIF::SDK::FormatFactory;
use Getopt::Long;
use Carp;
use Data::Dumper;

use constant {
    REMOTE_DEFAULT  => 'https://localhost/v2',
    TIMEOUT_DEFAULT => 300,
    LIMIT_DEFAULT   => 500,
    FORMAT_DEFAULT  => 'table',
    CONFIG_DEFAULT  => $ENV{'HOME'}.'/.cif.yml',
};

my $help;
my $remote          = REMOTE_DEFAULT();
my $no_verify_ssl   = 0;
my $timeout         = TIMEOUT_DEFAULT();
my $token;
my $format          = FORMAT_DEFAULT();
my $ping            = 0;
my $nolog           = 0;
my $limit;
my $submit		    = 0;
my $ping_ttl        = 4;
my $debug           = 0;
my $verbosity       = 0;
my $config          = CONFIG_DEFAULT();
my $feed;

my $filters;

Getopt::Long::Configure("bundling");
GetOptions(
    'help|h'            => \$help, 
    'config|C=s'        => \$config,
    'debug|d'           => \$debug,
    'verbosity|v+'      => \$verbosity,
    
    'remote|R=s'        => \$remote,
    'query|q=s'         => \$filters->{'query'},
    'id=s'              => \$filters->{'id'},
    'submit|s'          => \$submit,
    'token|T=s'         => \$token,
    'groups|g=s'        => \$filters->{'groups'},
    'limit|l=i'         => \$limit,
    'confidence|c=i'    => \$filters->{'confidence'},
    'tags|t=s'          => \$filters->{'tags'},
    'cc=s'              => \$filters->{'cc'},
    'app=s'             => \$filters->{'app'},
    'asns=s'            => \$filters->{'asns'},
    'otypes=s'          => \$filters->{'otypes'},
    'providers=s'       => \$filters->{'providers'},
    'feed'              => \$feed,
    
    'no-verify-ssl'     => \$no_verify_ssl,
    
    'ping|p'            => \$ping,
    'format|f=s'        => \$format,
    'nolog|n'           => \$nolog,
    'ttl=n'				=> \$ping_ttl,
) or die(usage());

die(usage()) if($help);
die(usage()) unless($filters || $ping || $submit);

if(-e $config){
	$config = parse_config($config);
    
    $remote         = $config->{'remote'} if($config->{'remote'} && $remote eq REMOTE_DEFAULT());
    $token          = $config->{'token'} if($config->{'token'} && !$token);
    $no_verify_ssl  = $config->{'no_verify_ssl'} if($config->{'no_verify_ssl'} && !$no_verify_ssl); # double negative
    $limit          = $config->{'limit'} if($config->{'limit'} && $limit != LIMIT_DEFAULT());
    $timeout        = $config->{'timeout'} if($config->{'timeout'} && $timeout != TIMEOUT_DEFAULT());
    $nolog          = $config->{'nolog'} if($config->{'nolog'});
}

my $loglevel = ($debug) ? 'DEBUG' : 'WARN';

init_logging(
    { 
        level       => $loglevel,
        category	=> 'cif',
    },
);

if($verbosity){
    unless($debug){ # we're already at TRACE
        $Logger->more_logging($verbosity);
    }
}

die(usage()."\nmissing Token (--token|-T)\n") unless($token);


if($submit){
    $submit = [];
    while(<STDIN>){
        chomp();
        push(@$submit,decode_json($_));
    }
}

sub usage {
    return <<EOF;

Usage: $0 [OPTION]

Options:

    -q, --query=STRING          specify a search
    --id STRING                 specify an id to retrieve
    -f, --format=FORMAT         specify the output format, default: $format
    -l, --limit=INT             specify a return limit (default set at router)
    -s, --submit                submit data via STDIN (json keypairs)
    
    -h, --help                  this message     

Filters:
    
    -c, --confidence=INT        by confidence (greater or eaqual to)
    -g, --groups STRING         by groups (everyone,group1,group2, ...)
    --tags STRING,STRING        by tags (scanner,hijacked,botnet, ...)
    --cc=STRING,STRING          by country codes (RU,US, ...)
    --asns=INT,INT              by asns (1234,2445, ...)
    --otypes=STRING,STRING      by observable type (ipv4,fqdn,url, ...)
    --providers=STRING,STRING   by provider (spamhaus.org,dragonresearchgroup.org, ...)
    
Advanced Options:

    -T, --token=STRING          specify an access token
    -R, --remote=STRING         specify the remote, default: $remote
    --no-verify-ssl             turn off SSL/TLS verification

Ping Options:
    --ttl=INT                   specify number of pings to send, default: $ping_ttl
                                (0 infinate, halt with SIGINT or CTRL+C)
 Examples:
    $0 -q example.com -v
    $0 --tags botnet,zeus -c 85
    $0 --app vnc,ssh --asns 1234 --cc RU,US
    $0 -q example.com --tags botnet,zeus -c 85 -l 50

EOF
}

$Logger->info('starting up client...');
my $cli = CIF::SDK::Client->new({
    token       => $token,
    remote      => $remote,
    timeout     => $timeout,
    verify_ssl  => ($no_verify_ssl) ? 0 : 1,
    nolog       => $nolog,
});

my ($err,$ret);
if($filters){
    $Logger->info('running search...');
    if($feed){
        ($err,$ret) = $cli->search_feed($filters);
    } else {
        ($err,$ret) = $cli->search($filters);
    }
    
    croak($err) if($err);
    $Logger->info('search returned, formatting..');
    my $formatter = CIF::SDK::FormatFactory->new_plugin({ format => $format });
    my $text = $formatter->process($ret);
    print $text."\n";
} elsif($submit){
    ## TODO
    
} elsif($ping){
    $Logger->info('pinging: '.$remote.'...');
    my $d = 0;
    $SIG{'INT'} = sub { $d = 1; };
    my ($x,$y) = (0, $ping_ttl);
    while(!$d){
        ($err,$ret) = $cli->ping();
        if($ret){
        say 'roundtrip: '.$ret.' ms';
        select(undef,undef,undef,1);
        $x++ if($y); # increase if we're not going infinately
        $d = 1 if($x && ($x == $y)); # done if we reach ttl
        } else {
            $Logger->fatal($err);
            $d = 1;
        }
    }
}
$Logger->info('done...');
